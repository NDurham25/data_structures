
#include <iostream>

const int SIZE = 5;
int weights[SIZE][SIZE];
int smallestW[SIZE];

void initializeW() {
    for(int i = 0; i < SIZE; i++){
        for(int j = 0; j < SIZE; j++){
            weights[i][j] = 1000000000;
        }
    }
}

void printSmallestW(){
    std::cout << "Smallest weights: ";
    for(int i = 0; i < SIZE; i++){
        std::cout << smallestW[i] << " ";
    }
    std::cout << "\n";
}

void findShortestPath(int u) {
    bool weightsF[SIZE];
    // Initialization
    for(int i = 0; i < SIZE; i++){
        smallestW[i] = weights[u][i];
        weightsF[i] = false;
    }
    
    smallestW[u] = 0;
    weightsF[u] = true;
    printSmallestW();
    
    //Main loop
    for(int i = 0; i < SIZE-1; i++){
        int minW = 1000000000;
        int v;
        // Find v
        for(int j = 0; j < SIZE; j++){
            if(!weightsF[j]){
                if(smallestW[j] < minW){
                    v = j;
                    minW = smallestW[j];
                }
            }
        }
        
        weightsF[v] = true;
        // Check paths via v to weights
        for(int j = 0; j < SIZE; j++){
            if(!weightsF[j]){
                if(minW + weights[v][j] < smallestW[j]){
                    smallestW[j] = minW + weights[v][j];
                }
            }
        }
    }
    printSmallestW();
}

int main()
{
    std::cout << "Shortest path algorithm";
    std::cout << "\n\n";

    initializeW();
    weights[0][1] = 16;
    weights[0][4] = 3;
    weights[0][3] = 2;
    
    weights[1][2] = 5;
    weights[2][1] = 3;
    
    weights[3][1] = 12;
    weights[3][4] = 7;
    
    findShortestPath(0);
    
    return 0;
}
