
#include <iostream>

using namespace std;

const int SIZE = 7;

int weights[SIZE][SIZE];

bool V[SIZE];

struct edgeItem{
    int start;
    int end;
};


edgeItem E[SIZE*SIZE];

void initializeWV() {
    for(int i=0; i<SIZE; i++) {
        for(int j=0; j<SIZE; j++) {
            weights[i][j] = 1000000;
        }
        V[i] = false;
    }
}

void findMST(int source){
    int eco = 0;
    V[source] = true;
    
    
    for(int i = 0; i < SIZE; i++){
        int minW = 1000000;
        int endV;
        edgeItem edge;
        for(int j = 0; j < SIZE; j++){
            if(V[j]){
                for(int k = 0; k < SIZE; k++){
                    if(V[k] == false && weights[j][k] < minW){
                        endV = k;
                        edge.start = j;
                        edge.end = k;
                        minW = weights[j][k];
                    }
                }
            }
        }
        V[endV] = true;
        E[eco].start = edge.start;
        E[eco].end = edge.end;
        eco++;
    }
    
    cout << "Optimal edges in the spanning tree is:\n";
    for(int i = 0; i < eco; i++){
        cout << E[i].start << " " << E[i].end << "\n";
    }
}

int main()
{
    cout << "Initializing weights and V ...\n";
    initializeWV();
    
    weights[0][1] = 6;
    weights[1][0] = 6;
    weights[0][3] = 2;
    weights[3][0] = 2;
    weights[0][2] = 5;
    weights[2][0] = 5;
    
    weights[1][4] = 2;
    weights[4][1] = 2;
    weights[1][6] = 4;
    weights[6][1] = 4;
    
    weights[3][4] = 8;
    weights[4][3] = 8;
    
    weights[2][5] = 7;
    weights[5][2] = 7;
    weights[2][6] = 5;
    weights[6][2] = 5;
    
    weights[4][5] = 10;
    weights[5][4] = 10;
    
    weights[5][5] = 7;
    
    cout << "Calculating the minimum spanning tree ...\n";
    findMST(0);
    
    
    return 0;
}
